<!DOCTYPE html>
<html>
<head>
    <title>Screening</title>
    <style>
        /* Styling for the table */

        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            padding: 20px;
        }

        h1 {
            text-align: center;
            color: #333;
        }

        table {
            border-collapse: collapse;
            width: 80%;
            margin: 20px auto;
            background-color: #fff;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        table, th, td {
            border: 1px solid #ccc;
        }

        th, td {
            padding: 10px;
            text-align: center;
        }

        /* Styling for the buttons */
        .button {
            background-color: #007bff;
            color: #fff;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            padding: 8px 12px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: background-color 0.3s, transform 0.2s;
        }

        .button:hover {
            background-color: #0056b3;
            transform: scale(1.05);
        }

        /* Styling for the popup container (initially hidden) */
        .popup-container {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            justify-content: center;
            align-items: center;
        }

        /* CSS for the smaller popup */
        .popup-box-small {
            background-color: #fff;
            padding: 10px; /* Smaller padding */
            border-radius: 5px;
            text-align: left; /* Align options vertically */
            max-height: 300px; /* Maximum height to enable scrolling if many options */
            overflow-y: auto; /* Enable vertical scrolling if needed */
        }

        /* Display radio buttons and labels vertically */
        .popup-box-small {
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            text-align: left;
            max-height: 300px;
            overflow-y: auto;
        }

        .popup-box-small label {
            display: block;
        }

        .popup-box-small input[type="radio"] {
            margin-right: 5px;
        }

        p {
            text-align: center;
        }

        button.Preventative, button.FollowUp {
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            margin: 10px;
            cursor: pointer;
        }

        button.Preventative:hover, button.FollowUp:hover {
            background-color: #0056b3;
        }

/* You can further adjust the width, height, and styling as per your requirements */

    </style>
</head>
<body>

    <h1>Screening</h1>
    <table>
      <tr>
        <!-- Create buttons for each tooth -->
        <% (1..3).each do |tooth_number| %>
          <td><button class="button" data-popup="popup<%= tooth_number %>" onclick="openPopup('popup<%= tooth_number %>')"><%= tooth_number %></button></td>
        <% end %>
        <% (4..13).each do |tooth_number| %>
          <td>
            <button class="button" data-popup="popup<%= tooth_number %>" onclick="openPopup('popup<%= tooth_number %>')">
              <%= tooth_number %><br><%= ('A'..'J').to_a[tooth_number - 4] %>
            </button>
          </td>
        <% end %>
        <% (14..16).each do |tooth_number| %>
          <td>
            <button class="button" data-popup="popup<%= tooth_number %>" onclick="openPopup('popup<%= tooth_number %>')">
              <%= tooth_number %>
            </button>
          </td>
        <% end %>
      </tr>
      <tr>
        <% (1..16).each do |tooth_number|%>
            <td data-cell="popup<%= tooth_number %>">Make a selection</td>
        <% end %>
      </tr>
      <tr>
        <!-- Create buttons for each tooth -->
        <% (32).downto(30).each do |tooth_number| %>
          <td><button class="button" data-popup="popup<%= tooth_number %>" onclick="openPopup('popup<%= tooth_number %>')"><%= tooth_number %></button></td>
        <% end %>
        <% (29).downto(20).each do |tooth_number| %>
          <td>
            <button class="button" data-popup="popup<%= tooth_number %>" onclick="openPopup('popup<%= tooth_number %>')">
              <%= ('T'.ord).downto('K'.ord).map(&:chr)[29 - tooth_number] %> <br> <%= tooth_number %>
            </button>
          </td>
        <% end %>
        <% (19).downto(17).each do |tooth_number| %>
          <td>
            <button class="button" data-popup="popup<%= tooth_number %>" onclick="openPopup('popup<%= tooth_number %>')">
              <%= tooth_number %>
            </button>
          </td>
        <% end %>
      </tr>
      <tr>
        <% (32).downto(17).each do |tooth_number|%>
          <td data-cell="popup<%= tooth_number %>">Make a Selection</td>
        <% end %>
      </tr>
    </table>
    <% (1..32).each do |tooth_number| %>
      <div class="popup-container" id="popup<%= tooth_number %>">
        <div class="popup-box-small">
          <% radio_options = [
            { value: "D", label: "D - Decay" },
            { value: "F", label: "F - Filled" },
            { value: "M", label: "M - Missing" },
            { value: "S", label: "S - Sealant Present" },
            # { value: "PS", label: "PS - Prescribe Present" },
            { value: "RS", label: "RS - Recommended Reseal" },
            { value: "no mark", label: "No Treatment (No Mark)" }
          ] %>
          <% radio_options.each do |option| %>
            <label>
              <input type="radio" name="radio<%= tooth_number %>" value="<%= option[:value] %>">
              <%= option[:label] %>
            </label>
          <% end %>
          <button onclick="closePopup('<%= tooth_number %>','popup<%= tooth_number %>')">Close</button>
        </div>
      </div>
    <% end %>
<br/>
<br/>
    <p>Untreated Cavities: <span contenteditable="true" id="untreatedCavities">0</span></p>
    <p>Caries Experience: <span contenteditable="true" id="cariesExperience">0</span></p>
    <p>Sealants Present:  <span contenteditable="true" id="sealantPresent">0</span></p>
    <p>Referred for treatment: <span contenteditable="true" id="referredTreatment">0</span></p>
<br/>
    <button type="button" class="Preventative" id="PreventativeButton">Preventative Service</button>
    <button type="button" class="FollowUp" id="FollowUpButton">Follow Up</button>
    <script>

        ///Code for Screening
        const selectedOptions = {}; // Object to hold selected options for each popup

        // Function to open the popup and set selected option
        function openPopup(popupId) {
            // console.log(selected)
            const popup = document.getElementById(popupId);

            // Show the popup
            if (popup) {
                popup.style.display = 'block';
            }
        }

        // Function to save the selected option and close the popup
        function closePopup(Id, popupId) {
            const radioOptions = document.querySelectorAll(`input[name="radio${Id}"]`);
            const cell = document.querySelector(`td[data-cell="${popupId}"]`); // Add this line to select the corresponding cell

            // Find the selected option for the specific popup
            radioOptions.forEach(option => {
                if (option.checked) {
                    selectedOptions[popupId] = option.value; // Save the selected option to the object
                    cell.textContent = selectedOptions[popupId]; // Set the cell text to the selected option
                }
            });

            // Close the popup
            closePopupActual(popupId);
            updateUntreatedCavities();
            updateReferredTreatment();
            updateCariesExperience();
            updateSealantPresent();
        }

        // Function to close the popup
        function closePopupActual(popupId) {
            const popup = document.getElementById(popupId);
            if (popup) {
                popup.style.display = 'none';
            }
        }

        function updateUntreatedCavities() {
            let untreatedCavitiesCount = 0;

            for (const tooth in selectedOptions) {
                if (selectedOptions[tooth] === 'D') {
                    untreatedCavitiesCount++;
                }
            }

            const untreatedCavitiesElement = document.getElementById('untreatedCavities');

            // Update the "Untreated Cavities" field
            untreatedCavitiesElement.textContent = untreatedCavitiesCount;
        }

        function updateReferredTreatment() {
            let ReferredTreatmentCount = 0;

            for (const tooth in selectedOptions) {
                if (selectedOptions[tooth] === 'RS') {
                    ReferredTreatmentCount++;
                }
            }

            const referredTreatmentElement = document.getElementById('referredTreatment');

            // Update the "Untreated Cavities" field
            referredTreatmentElement.textContent = ReferredTreatmentCount;
        }

        function updateCariesExperience() {
            let CariesExperienceCount = 0;

            for (const tooth in selectedOptions) {
                if (selectedOptions[tooth] === 'F') {
                    CariesExperienceCount++;
                }
            }

            const cariesExperienceElement = document.getElementById('cariesExperience');

            // Update the "Untreated Cavities" field
            cariesExperienceElement.textContent = CariesExperienceCount;
        }

        function updateSealantPresent() {
            let SealantPresentCount = 0;

            for (const tooth in selectedOptions) {
                if (selectedOptions[tooth] === 'S') {
                    SealantPresentCount++;
                }
            }

            const sealantPresentElement = document.getElementById('sealantPresent');

            // Update the "Untreated Cavities" field
            sealantPresentElement.textContent = SealantPresentCount;
        }

        FollowUpButton.addEventListener('click', function() {
          // Redirect to the screening.html.erb page
          window.location.href = '/followup';
        });

        PreventativeButton.addEventListener('click', function() {
            // Redirect to the screening.html.erb page
            window.location.href = '/preventive_services';
        });

    </script>
</body>
</html>